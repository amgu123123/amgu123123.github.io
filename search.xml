<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>music163逆向-python</title>
    <url>/posts/fd4614f0/</url>
    <content><![CDATA[<p><strong>声明<br>本文章所有内容仅供学习交流使用，不用于其他任何目的，严禁用于商业用途和非法用途，否则，由此产生的一切后果均与作者无关，若有侵权，请联系作者立即删除！</strong></p>
<details>
<summary>Code</summary>
<pre><code class="language-python">
from Crypto.Cipher import AES
from base64 import b64encode
from Crypto.Util.Padding import pad
import random
import json
import requests

<p>headers &#x3D; &#123;<br>            ‘Accept’: ‘<em>&#x2F;</em>‘,<br>            ‘Accept-Encoding’: ‘gzip,deflate,sdch’,<br>            ‘Accept-Language’: ‘zh-CN,zh;q&#x3D;0.8,gl;q&#x3D;0.6,zh-TW;q&#x3D;0.4’,<br>            ‘Connection’: ‘keep-alive’,<br>            ‘Content-Type’: ‘application&#x2F;x-www-form-urlencoded’,<br>            ‘Host’: ‘music.163.com’,<br>            ‘Referer’: ‘<a href="https://music.163.com/">https://music.163.com/</a>‘,<br>            ‘User-Agent’: ‘Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;63.0.3239.132 Safari&#x2F;537.36’<br>        &#125;</p>
<p>def gen_ran_string(num&#x3D;16):<br>    “””<br>    生成随机密钥<br>    :param num: &#x3D;16<br>    :return: 16位随机字符串<br>    “””<br>    chars &#x3D; ‘abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789’<br>    result &#x3D; “”<br>    b_len &#x3D; len(chars)<br>    for _ in range(num):<br>        index &#x3D; int(random.random() * b_len)<br>        result +&#x3D; chars[index]<br>    return result</p>
<p>def aes(a, b):<br>    key &#x3D; b.encode(‘utf-8’)<br>    iv &#x3D; b’0102030405060708’<br>    cipher &#x3D; AES.new(key, AES.MODE_CBC, iv)<br>    padded_data &#x3D; pad(a.encode(‘utf-8’), AES.block_size, style&#x3D;’pkcs7’)<br>    ciphertext &#x3D; cipher.encrypt(padded_data)<br>    return b64encode(ciphertext).decode(‘utf-8’)</p>
<p>class RSAKeyPair:<br>    def <strong>init</strong>(self, e_hex, d_hex, m_hex):<br>        self.e &#x3D; int(e_hex, 16)<br>        self.m &#x3D; int(m_hex, 16)<br>        # 计算 chunk_size：根据模数字节长度确定<br>        byte_length &#x3D; (self.m.bit_length() + 7) &#x2F;&#x2F; 8<br>        self.chunk_size &#x3D; byte_length - 2  # 等效于原JS的 2 * biHighIndex(m)<br>        self.radix &#x3D; 16</p>
<p>def encrypted_string(rsa_key, s):<br>    # 将字符串编码为Latin-1字节数组<br>    byte_data &#x3D; s.encode(‘latin-1’)<br>    # 填充0直到长度为chunk_size的倍数<br>    padding &#x3D; (-len(byte_data)) % rsa_key.chunk_size<br>    byte_data +&#x3D; bytes(padding)</p>
<pre><code>encrypted_blocks = []
hex_length = (rsa_key.m.bit_length() + 3) // 4  # 模数的十六进制长度

for i in range(0, len(byte_data), rsa_key.chunk_size):
    chunk = byte_data[i:i + rsa_key.chunk_size]
    # 转换为小端整数
    chunk_int = int.from_bytes(chunk, byteorder=&#39;little&#39;)
    # RSA加密：计算 (chunk^e) mod m
    encrypted_int = pow(chunk_int, rsa_key.e, rsa_key.m)
    # 转换为固定长度的十六进制字符串
    encrypted_hex = format(encrypted_int, &#39;0&#123;&#125;x&#39;.format(hex_length))
    encrypted_blocks.append(encrypted_hex)

return &#39; &#39;.join(encrypted_blocks)
</code></pre>
<p>def rsa(a, e_hex, m_hex):<br>    rsa_key &#x3D; RSAKeyPair(e_hex, “”, m_hex)<br>    return encrypted_string(rsa_key, a)</p>
<p>def post_request(url,params):<br>    session &#x3D; requests.Session()<br>    res&#x3D;session.post(url&#x3D;url,headers&#x3D;headers,data&#x3D;params)<br>    return res.json()</p>
<p>def encrypt_data(id):<br>    ramdom_string &#x3D; gen_ran_string()<br>    params &#x3D; {<br>        ‘ids’: [id],<br>        ‘csrf_token’: ‘’,<br>        ‘encodeType’: ‘aac’,<br>        ‘level’: ‘standard’<br>    }<br>    e &#x3D; ‘010001’<br>    f &#x3D; ‘00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7’<br>    g &#x3D; ‘0CoJUm6Qyw8W8jud’<br>    encText &#x3D; aes(json.dumps(params), g)<br>    encText &#x3D; aes(encText, ramdom_string)<br>    encSecKey &#x3D; rsa(ramdom_string, e, f)<br>    data &#x3D; {<br>        ‘params’: encText,<br>        ‘encSecKey’: encSecKey<br>    }<br>    return data<br>def get_song_by_songId(id):<br>    data&#x3D;encrypt_data(id)<br>    res&#x3D;post_request(‘<a href="https://music.163.com/weapi/song/enhance/player/url/v1',data">https://music.163.com/weapi/song/enhance/player/url/v1&#39;,data</a>)<br>    print(res)</p>
<p>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:<br>    id&#x3D;’8729797481’ #音乐id<br>    get_song_by_songId(id)<br></code></pre></p>
</details>]]></content>
  </entry>
  <entry>
    <title>用Babel操作AST实现JavaScript代码的自动化生成与转换</title>
    <url>/posts/4a8d30c3/</url>
    <content><![CDATA[<blockquote>
<p>学习本文后，你将能够开发自己的代码转换工具！</p>
</blockquote>
<span id="more"></span>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li>
<li><a href="#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">环境搭建</a></li>
<li><a href="#%E5%B8%B8%E8%A7%81%E8%8A%82%E7%82%B9%E7%B1%BB%E5%9E%8B">常见节点类型</a></li>
<li><a href="#%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9ast%E7%9A%84%E9%80%BB%E8%BE%91">代码：修改AST的逻辑</a><ul>
<li><a href="#%E9%87%8D%E5%91%BD%E5%90%8D%E5%87%BD%E6%95%B0%E5%90%8D">重命名函数名</a></li>
<li><a href="#%E9%87%8D%E5%91%BD%E5%90%8D%E5%8F%98%E9%87%8F%E5%B9%B6%E4%BF%AE%E6%94%B9%E5%8F%98%E9%87%8F%E5%80%BC">重命名变量并修改变量值</a></li>
<li><a href="#%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%9B%BF%E6%8D%A2">函数调用替换</a></li>
<li><a href="#%E6%8E%A7%E5%88%B6%E6%B5%81%E6%89%81%E5%B9%B3%E5%8C%96%E8%BF%98%E5%8E%9F">控制流扁平化还原</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E6%9C%AA%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8F%98%E9%87%8F">删除未使用的变量</a></li>
<li><a href="#%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%AE%80%E5%8C%96">对象属性简化</a></li>
<li><a href="#%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BC%98%E5%8C%96">条件表达式优化</a></li>
<li><a href="#%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%98%E5%8E%9F">表达式还原</a></li>
</ul>
</li>
</ul>
<hr>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol>
<li>安装环境<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install @babel/parser @babel/traverse @babel/generator @babel/types</span><br></pre></td></tr></table></figure></li>
<li>ast转换的代码框架<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;node:vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&#x27;@babel/parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&#x27;@babel/traverse&#x27;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="keyword">const</span> t = <span class="built_in">require</span>(<span class="string">&#x27;@babel/types&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&#x27;@babel/generator&#x27;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取混淆代码文件</span></span><br><span class="line"><span class="keyword">const</span> code = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;obfuscated.js&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析为AST</span></span><br><span class="line"><span class="keyword">const</span> ast = parser.<span class="title function_">parse</span>(code);</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO 修改AST的逻辑将在这里编写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成新代码</span></span><br><span class="line"><span class="keyword">const</span> output = <span class="title function_">generator</span>(ast);</span><br><span class="line">fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;clean.js&#x27;</span>, output.<span class="property">code</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="常见节点类型"><a href="#常见节点类型" class="headerlink" title="常见节点类型"></a>常见节点类型</h2><p><strong>1. Identifier    -&gt; 变量名<br>2. CallExpression -&gt; 函数调用<br>3. MemberExpression -&gt; 对象属性访问<br>4. VariableDeclarator -&gt; 变量声明</strong></p>
<h2 id="代码：修改AST的逻辑"><a href="#代码：修改AST的逻辑" class="headerlink" title="代码：修改AST的逻辑"></a>代码：修改AST的逻辑</h2><h3 id="重命名函数名"><a href="#重命名函数名" class="headerlink" title="重命名函数名"></a>重命名函数名</h3><ol>
<li>案例<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x1a2b</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">atob</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">_0x1a2b</span>(<span class="string">&quot;SGVsbG8=&quot;</span>)); <span class="comment">// 输出 &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>结果<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">decryptString</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">atob</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">_0x1a2b</span>(<span class="string">&quot;SGVsbG8=&quot;</span>)); <span class="comment">// 输出 &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>代码实现：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重命名加密函数</span></span><br><span class="line">    <span class="title class_">FunctionDeclaration</span>(path) &#123;</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">id</span>.<span class="property">name</span>===<span class="string">&#x27;_0x1a2b&#x27;</span>) &#123;</span><br><span class="line">            path.<span class="property">node</span>.<span class="property">id</span>.<span class="property">name</span>=<span class="string">&#x27;decryptString&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="重命名变量并修改变量值"><a href="#重命名变量并修改变量值" class="headerlink" title="重命名变量并修改变量值"></a>重命名变量并修改变量值</h3><ol>
<li>案例<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x12ab</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _0x3cde = [<span class="string">&quot;\\x48\\x65\\x6c\\x6c\\x6f&quot;</span>, <span class="string">&quot;\\x77\\x6f\\x72\\x6c\\x64&quot;</span>];</span><br><span class="line">  <span class="keyword">return</span> _0x3cde[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + _0x3cde[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>结果<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x12ab</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> words = [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;world&quot;</span>];</span><br><span class="line">  <span class="keyword">return</span> words[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + words[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>代码实现：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重命名变量并解密字符串</span></span><br><span class="line">    <span class="comment">//变量声明节点</span></span><br><span class="line">    <span class="title class_">VariableDeclarator</span>(path) &#123;</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">id</span>.<span class="property">name</span> === <span class="string">&#x27;_0x3cde&#x27;</span>) &#123;</span><br><span class="line">            path.<span class="property">node</span>.<span class="property">id</span>.<span class="property">name</span> = <span class="string">&#x27;words&#x27;</span>;  <span class="comment">// 修改变量名</span></span><br><span class="line">            <span class="comment">// 遍历elements数组</span></span><br><span class="line">            path.<span class="property">node</span>.<span class="property">init</span>.<span class="property">elements</span> = path.<span class="property">node</span>.<span class="property">init</span>.<span class="property">elements</span>.<span class="title function_">map</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 解密十六进制字符串</span></span><br><span class="line">                <span class="keyword">const</span> decoded = element.<span class="property">value</span>.<span class="title function_">replace</span>(<span class="regexp">/\\x([0-9a-fA-F]&#123;2&#125;)/g</span>,</span><br><span class="line">                    <span class="function">(<span class="params">_, hex</span>) =&gt;</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="built_in">parseInt</span>(hex, <span class="number">16</span>))</span><br><span class="line">                );</span><br><span class="line">                <span class="comment">// 关键</span></span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&#x27;StringLiteral&#x27;</span>, <span class="attr">value</span>: decoded &#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//对象成员访问节点</span></span><br><span class="line">    <span class="title class_">MemberExpression</span>(path) &#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="property">node</span>.<span class="property">object</span>.<span class="property">name</span>===<span class="string">&#x27;_0x3cde&#x27;</span>)&#123;</span><br><span class="line">            path.<span class="property">node</span>.<span class="property">object</span>.<span class="property">name</span>=<span class="string">&#x27;words&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="函数调用替换"><a href="#函数调用替换" class="headerlink" title="函数调用替换"></a>函数调用替换</h3><ol>
<li>案例<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x1a2b</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">atob</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">_0x1a2b</span>(<span class="string">&quot;SGVsbG8=&quot;</span>)); <span class="comment">// 输出 &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>结果<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x1a2b</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">atob</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// 输出 &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>代码实现：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">CallExpression</span>(path) &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">callee</span>.<span class="property">name</span>===<span class="string">&#x27;_0x1a2b&#x27;</span>&amp;&amp;path.<span class="property">node</span>.<span class="property">arguments</span>[<span class="number">0</span>].<span class="property">type</span>===<span class="string">&#x27;StringLiteral&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//取出参数</span></span><br><span class="line">        <span class="keyword">const</span> encryptedStr=path.<span class="property">node</span>.<span class="property">arguments</span>[<span class="number">0</span>].<span class="property">value</span>;</span><br><span class="line">        <span class="comment">// 对参数进行解密</span></span><br><span class="line">        <span class="keyword">const</span> decryptedStr=<span class="title function_">atob</span>(encryptedStr);</span><br><span class="line">        <span class="comment">// 把原来的参数调用_0x1a2b(&quot;SGVsbG8=&quot;)，替换为decryptedStr，即对atob(encryptedStr)</span></span><br><span class="line">        path.<span class="title function_">replaceWith</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;StringLiteral&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>:decryptedStr</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="控制流扁平化还原"><a href="#控制流扁平化还原" class="headerlink" title="控制流扁平化还原"></a>控制流扁平化还原</h3><ol>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x1234</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _0x5678 = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (_0x5678.<span class="title function_">shift</span>()) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x1234</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>AST转换逻辑<br> · 识别switch-case结构：找到SwitchStatement节点<br> · 提取case顺序：通过_0x5678数组的初始值确定执行顺序（本例顺序为2→0→1）<br> · 重建代码顺序：按顺序合并case块中的语句，删除switch和while结构</p>
</li>
<li><p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">FunctionDeclaration</span>(path) &#123;</span><br><span class="line">    <span class="comment">// 1. 定位控制流数组声明</span></span><br><span class="line">    <span class="keyword">const</span> controlFlowDecl=path.<span class="property">node</span>.<span class="property">body</span>.<span class="property">body</span>.<span class="title function_">find</span>(<span class="function"><span class="params">n</span>=&gt;</span></span><br><span class="line">       (t.<span class="title function_">isVariableDeclaration</span>(n)&amp;&amp;</span><br><span class="line">       n.<span class="property">declarations</span>[<span class="number">0</span>].<span class="property">id</span>.<span class="property">name</span>===<span class="string">&#x27;_0x5678&#x27;</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (!controlFlowDecl) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 2. 提取控制流顺序 [2, 0, 1]</span></span><br><span class="line">    <span class="keyword">const</span> controlFlowArray = controlFlowDecl.<span class="property">declarations</span>[<span class="number">0</span>].<span class="property">init</span>.<span class="property">elements</span></span><br><span class="line">        .<span class="title function_">map</span>(<span class="function"><span class="params">e</span>=&gt;</span>e.<span class="property">value</span>);</span><br><span class="line">    <span class="comment">// 3. 删除控制流数组声明</span></span><br><span class="line">    path.<span class="property">node</span>.<span class="property">body</span>.<span class="property">body</span>=path.<span class="property">node</span>.<span class="property">body</span>.<span class="property">body</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">n</span>=&gt;</span></span><br><span class="line">        n!==controlFlowDecl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 提取switch语句</span></span><br><span class="line">    <span class="keyword">const</span> switchStmt = path.<span class="property">node</span>.<span class="property">body</span>.<span class="property">body</span></span><br><span class="line">        .<span class="title function_">find</span>(<span class="function"><span class="params">n</span> =&gt;</span> t.<span class="title function_">isWhileStatement</span>(n)).<span class="property">body</span>.<span class="property">body</span></span><br><span class="line">        .<span class="title function_">find</span>(<span class="function"><span class="params">n</span> =&gt;</span> t.<span class="title function_">isSwitchStatement</span>(n));;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 删除while语句</span></span><br><span class="line">    path.<span class="property">node</span>.<span class="property">body</span>.<span class="property">body</span>=path.<span class="property">node</span>.<span class="property">body</span>.<span class="property">body</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">n</span>=&gt;</span>!t.<span class="title function_">isWhileStatement</span>(n));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 建立case值到语句的映射</span></span><br><span class="line">    <span class="keyword">const</span> caseMap=<span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    switchStmt.<span class="property">cases</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">n</span>=&gt;</span>&#123;</span><br><span class="line">       caseMap.<span class="title function_">set</span>(n.<span class="property">test</span>.<span class="property">value</span>,n.<span class="property">consequent</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 按控制流顺序重组语句</span></span><br><span class="line">    <span class="keyword">const</span> orderedStatements=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> caseVal <span class="keyword">of</span> controlFlowArray)&#123;</span><br><span class="line">        <span class="keyword">const</span> stmts=caseMap.<span class="title function_">get</span>(caseVal)</span><br><span class="line">            .<span class="title function_">filter</span>(<span class="function"><span class="params">n</span>=&gt;</span>!t.<span class="title function_">isContinueStatement</span>(n));<span class="comment">// 移除continue</span></span><br><span class="line">        orderedStatements.<span class="title function_">push</span>(...stmts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8. 插入到函数体头部（保留其他语句）</span></span><br><span class="line">    path.<span class="property">node</span>.<span class="property">body</span>.<span class="property">body</span>.<span class="title function_">unshift</span>(...orderedStatements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="删除未使用的变量"><a href="#删除未使用的变量" class="headerlink" title="删除未使用的变量"></a>删除未使用的变量</h3><ol>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原始代码</span></span><br><span class="line"><span class="keyword">const</span> unusedVar = <span class="string">&quot;test&quot;</span>; <span class="comment">// 无任何地方使用</span></span><br><span class="line"><span class="keyword">const</span> activeVar = <span class="string">&quot;data&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(activeVar);</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> activeVar = <span class="string">&quot;data&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(activeVar);</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">VariableDeclarator</span>(path)&#123;</span><br><span class="line">    <span class="keyword">const</span> binding = path.<span class="property">scope</span>.<span class="title function_">getBinding</span>(path.<span class="property">node</span>.<span class="property">id</span>.<span class="property">name</span>);</span><br><span class="line">    <span class="comment">// 检测变量是否未被引用</span></span><br><span class="line">    <span class="keyword">if</span> (!binding || binding.<span class="property">references</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 删除整个 VariableDeclaration（需判断是否最后一个声明）</span></span><br><span class="line">        <span class="keyword">const</span> parent = path.<span class="property">parent</span>;</span><br><span class="line">        <span class="keyword">if</span> (parent.<span class="property">declarations</span>.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 情况1：整个 VariableDeclaration 只有一个声明 eg: const a = 1;</span></span><br><span class="line">            path.<span class="property">parentPath</span>.<span class="title function_">remove</span>();<span class="comment">// 删除父节点（即整个声明语句）</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 情况2：声明语句中有多个变量 eg: let a = 1, b = 2;</span></span><br><span class="line">            path.<span class="title function_">remove</span>();<span class="comment">// 只删除当前 VariableDeclarator</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="对象属性简化"><a href="#对象属性简化" class="headerlink" title="对象属性简化"></a>对象属性简化</h3><ol>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _0xabc = &#123;</span><br><span class="line">  <span class="string">&quot;xYz&quot;</span>: <span class="keyword">function</span>(<span class="params">s</span>) &#123; <span class="keyword">return</span> s.<span class="title function_">toUpperCase</span>(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(_0xabc[<span class="string">&quot;xYz&quot;</span>](<span class="string">&quot;hello&quot;</span>)); <span class="comment">// 输出 &quot;HELLO&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _0xabc = &#123;</span><br><span class="line">  <span class="attr">upper</span>: <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(utils.<span class="title function_">upper</span>(<span class="string">&quot;hello&quot;</span>)); <span class="comment">// 输出 &quot;HELLO&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>AST转换逻辑</p>
<ol>
<li>识别对象属性：找到ObjectProperty节点中的动态键（如”xYz”）</li>
<li>重命名属性和调用方式：将_0xabc[“xYz”]改为utils.upper</li>
</ol>
</li>
<li><p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ObjectProperty</span>(path) &#123;</span><br><span class="line">    <span class="comment">// 重命名键名</span></span><br><span class="line">    <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">key</span>.<span class="property">value</span> === <span class="string">&quot;xYz&quot;</span>) &#123;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">key</span> = t.<span class="title function_">identifier</span>(<span class="string">&quot;upper&quot;</span>); <span class="comment">// 改为标识符形式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title class_">MemberExpression</span>(path) &#123;</span><br><span class="line">    <span class="comment">// 转换动态属性访问为静态</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        t.<span class="title function_">isIdentifier</span>(path.<span class="property">node</span>.<span class="property">object</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;_0xabc&quot;</span> &#125;) &amp;&amp;</span><br><span class="line">        t.<span class="title function_">isStringLiteral</span>(path.<span class="property">node</span>.<span class="property">property</span>, &#123; <span class="attr">value</span>: <span class="string">&quot;xYz&quot;</span> &#125;)</span><br><span class="line">    ) &#123;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">object</span>.<span class="property">name</span> = <span class="string">&quot;utils&quot;</span>;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">property</span> = t.<span class="title function_">identifier</span>(<span class="string">&quot;upper&quot;</span>);</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">computed</span> = <span class="literal">false</span>; <span class="comment">// 改为.访问方式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="条件表达式优化"><a href="#条件表达式优化" class="headerlink" title="条件表达式优化"></a>条件表达式优化</h3><ol>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isVIP = !![]; <span class="comment">// 混淆写法：!![] → true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isVIP ? <span class="string">&quot;VIP User&quot;</span> : <span class="string">&quot;Guest&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isVIP = <span class="literal">true</span>; <span class="comment">// 混淆写法：!![] → true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;VIP User&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>AST转换逻辑<br> · 计算常量表达式：在AST遍历阶段预计算!![]的值<br> · 删除无效分支：根据计算结果删除false分支</p>
</li>
<li><p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">VariableDeclarator</span>(path) &#123;</span><br><span class="line">    <span class="comment">//!![] → true</span></span><br><span class="line">    <span class="keyword">if</span> (t.<span class="title function_">isUnaryExpression</span>(path.<span class="property">node</span>.<span class="property">init</span>,&#123; <span class="attr">operator</span>: <span class="string">&quot;!&quot;</span> &#125;))&#123;</span><br><span class="line">        <span class="keyword">if</span> (t.<span class="title function_">isUnaryExpression</span>(path.<span class="property">node</span>.<span class="property">init</span>.<span class="property">argument</span>,&#123; <span class="attr">operator</span>: <span class="string">&quot;!&quot;</span> &#125;))&#123;</span><br><span class="line">            <span class="comment">// 3. 检测最内层是否为空数组 []</span></span><br><span class="line">            <span class="keyword">const</span> arrayExpr = path.<span class="property">node</span>.<span class="property">init</span>.<span class="property">argument</span>.<span class="property">argument</span>;</span><br><span class="line">            <span class="keyword">if</span>(t.<span class="title function_">isArrayExpression</span>(arrayExpr) &amp;&amp; arrayExpr.<span class="property">elements</span>.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">                path.<span class="title function_">get</span>(<span class="string">&#x27;init&#x27;</span>).<span class="title function_">replaceWith</span>(t.<span class="title function_">booleanLiteral</span>(<span class="literal">true</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title class_">ConditionalExpression</span>(path) &#123;</span><br><span class="line">    <span class="comment">// 步骤1：检查 test 是否为变量引用（如 isVIP）</span></span><br><span class="line">    <span class="keyword">if</span> (!t.<span class="title function_">isIdentifier</span>(path.<span class="property">node</span>.<span class="property">test</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> varName = path.<span class="property">node</span>.<span class="property">test</span>.<span class="property">name</span>; <span class="comment">// 获取变量名 &#x27;isVIP&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 步骤2：从作用域中获取变量绑定信息</span></span><br><span class="line">    <span class="keyword">const</span> binding = path.<span class="property">scope</span>.<span class="title function_">getBinding</span>(varName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 步骤3：检查绑定是否存在且是常量</span></span><br><span class="line">    <span class="keyword">if</span> (!binding || !binding.<span class="property">constant</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 步骤4：找到变量的声明节点</span></span><br><span class="line">    <span class="keyword">const</span> declaration = binding.<span class="property">path</span>.<span class="property">node</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 步骤5：提取变量的初始值</span></span><br><span class="line">    <span class="keyword">if</span> (t.<span class="title function_">isVariableDeclarator</span>(declaration))&#123;</span><br><span class="line">        <span class="keyword">const</span> initValue = declaration.<span class="property">init</span>.<span class="property">value</span>; <span class="comment">// true</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`变量 <span class="subst">$&#123;varName&#125;</span> 的值为: <span class="subst">$&#123;initValue&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤6（可选）：根据值直接替换条件表达式</span></span><br><span class="line">        path.<span class="title function_">replaceWith</span>(</span><br><span class="line">            initValue ? path.<span class="property">node</span>.<span class="property">consequent</span> : path.<span class="property">node</span>.<span class="property">alternate</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="表达式还原"><a href="#表达式还原" class="headerlink" title="表达式还原"></a>表达式还原</h3><ol>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> e=<span class="number">840</span>;</span><br><span class="line">e= e - (-<span class="number">0x2</span> * <span class="number">0x7d6</span> + -<span class="number">0xd1</span> * <span class="number">0x14</span> + <span class="number">0x210e</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="number">840</span>;</span><br><span class="line">e = e - <span class="number">270</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态计算表达式值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">evaluateExpression</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (t.<span class="title function_">isLiteral</span>(node)) &#123;</span><br><span class="line">        <span class="keyword">return</span> node.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t.<span class="title function_">isUnaryExpression</span>(node)) &#123;</span><br><span class="line">        <span class="keyword">const</span> argValue = <span class="title function_">evaluateExpression</span>(node.<span class="property">argument</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> argValue === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node.<span class="property">operator</span> === <span class="string">&#x27;-&#x27;</span> ? -argValue : argValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t.<span class="title function_">isBinaryExpression</span>(node)) &#123;</span><br><span class="line">        <span class="keyword">const</span> left = <span class="title function_">evaluateExpression</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">const</span> right = <span class="title function_">evaluateExpression</span>(node.<span class="property">right</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> left === <span class="string">&#x27;number&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> right === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (node.<span class="property">operator</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">return</span> left + right;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">return</span> left - right;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">return</span> left * right;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">return</span> left / right;</span><br><span class="line">                <span class="comment">// 可扩展其他运算符</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>; <span class="comment">// 无法静态计算</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BinaryExpression(path) &#123;</span><br><span class="line">        const result = evaluateExpression(path.node);</span><br><span class="line">        if (typeof result === &#x27;number&#x27;) &#123;</span><br><span class="line">            // 替换为计算结果的字面量</span><br><span class="line">            path.replaceWith(t.numericLiteral(result));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>js</tag>
        <tag>Babel</tag>
        <tag>逆向</tag>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Python上下文管理器</title>
    <url>/posts/c4ecc1d1/</url>
    <content><![CDATA[<ul>
<li><a href="#1-%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8">1. 什么是上下文管理器？</a></li>
<li><a href="#2-with%E8%AF%AD%E5%8F%A5%E7%9A%84%E9%AD%94%E6%B3%95">2. with语句的魔法</a></li>
<li><a href="#3-%E5%88%9B%E5%BB%BA%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F">3. 创建上下文管理器的两种方式</a><ul>
<li><a href="#31-%E5%9F%BA%E4%BA%8E%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0">3.1 基于类的实现</a></li>
<li><a href="#32-%E4%BD%BF%E7%94%A8contextlib%E6%A8%A1%E5%9D%97">3.2 使用contextlib模块</a></li>
</ul>
</li>
<li><a href="#4-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">4. 异常处理</a></li>
</ul>
<h2 id="1-什么是上下文管理器？"><a href="#1-什么是上下文管理器？" class="headerlink" title="1. 什么是上下文管理器？"></a>1. 什么是上下文管理器？</h2><p>上下文管理器（Context Manager）是Python中用于<strong>精确分配和释放资源</strong>的机制。它通过<code>__enter__()</code>和<code>__exit__()</code>两个魔术方法实现了<code>上下文管理协议</code>，确保即使在代码执行出错的情况下，资源也能被正确清理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 经典文件操作对比</span></span><br><span class="line"><span class="comment"># 传统方式</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    content = f.read()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上下文管理器方式</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.read()</span><br></pre></td></tr></table></figure>

<p>典型应用场景包括：</p>
<ul>
<li>文件操作（自动关闭）</li>
<li>数据库连接（自动归还连接池）</li>
<li>线程锁（自动释放）</li>
<li>临时修改配置（自动恢复）</li>
</ul>
<h2 id="2-with语句的魔法"><a href="#2-with语句的魔法" class="headerlink" title="2. with语句的魔法"></a>2. with语句的魔法</h2><p><code>with</code>语句是上下文管理器的语法载体，其工作原理如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FileHandler</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;进入上下文时调用，返回资源对象&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;打开文件&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, *args</span>):</span><br><span class="line">         <span class="string">&quot;&quot;&quot;退出上下文时调用，处理清理和异常&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;关闭文件&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> FileHandler() <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;写入文件&quot;</span>)</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">等价于 →</span><br><span class="line"><span class="number">1.</span> context = FileHandler()</span><br><span class="line"><span class="number">2.</span> f = context.__enter__()</span><br><span class="line"><span class="number">3.</span> 执行代码块</span><br><span class="line"><span class="number">4.</span> context.__exit__(异常信息)</span><br><span class="line">   </span><br><span class="line">输出顺序 →</span><br><span class="line">打开文件</span><br><span class="line">写入文件</span><br><span class="line">关闭文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 3. 创建上下文管理器的两种方式</span></span><br><span class="line"><span class="comment">### 3.1 基于类的实现</span></span><br><span class="line">```python</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileManager</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename, mode</span>):</span><br><span class="line">        <span class="variable language_">self</span>.filename = filename</span><br><span class="line">        <span class="variable language_">self</span>.mode = mode</span><br><span class="line">        <span class="variable language_">self</span>.file = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.file = <span class="built_in">open</span>(<span class="variable language_">self</span>.filename, <span class="variable language_">self</span>.mode)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.file</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.file:</span><br><span class="line">            <span class="variable language_">self</span>.file.close()</span><br><span class="line">        <span class="comment"># 返回True表示已处理异常</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">with</span> FileManager(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;Hello Context Manager!&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="3-2-使用contextlib模块"><a href="#3-2-使用contextlib模块" class="headerlink" title="3.2 使用contextlib模块"></a>3.2 使用contextlib模块</h3><p>对于简单的场景，可以使用生成器+装饰器的简洁写法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_context</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;进入上下文&quot;</span>)  <span class="comment"># 相当于 __enter__</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;返回资源&quot;</span>  <span class="comment"># 此处为 as 后的变量</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;退出上下文&quot;</span>)  <span class="comment"># 相当于 __exit__</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">with</span> simple_context() <span class="keyword">as</span> value:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;获取到: <span class="subst">&#123;value&#125;</span>&quot;</span>)  <span class="comment"># 输出：获取到: 返回资源</span></span><br></pre></td></tr></table></figure>
<p><strong>执行流程</strong></p>
<ol>
<li>执行 yield 之前的代码（资源分配）</li>
<li>将 yield 的值传递给 as 后的变量</li>
<li>执行代码块</li>
<li>执行 yield 之后的代码（资源释放）</li>
</ol>
<h2 id="4-异常处理"><a href="#4-异常处理" class="headerlink" title="4. 异常处理"></a>4. 异常处理</h2><p>__exit__方法的三个参数专门处理异常：</p>
<pre><code>exc_type: 异常类型
exc_value: 异常值
traceback: 调用栈信息
</code></pre>
<p>返回 True 表示已处理异常，阻止传播<br>返回 False 或 None 则允许异常向上抛出<br><strong>正确处理异常：在__exit__中根据异常类型决定处理逻辑</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class SafeExecutor:</span><br><span class="line">    def __exit__(self, exc_type, exc_val, traceback):</span><br><span class="line">        if exc_type is None:</span><br><span class="line">            print(&quot;正常退出&quot;)</span><br><span class="line">            return False</span><br><span class="line">        </span><br><span class="line">        if issubclass(exc_type, (IOError, ValueError)): #当发生的异常类型是 IOError 或 ValueError 或其子类时，执行特定处理逻辑。</span><br><span class="line">            print(f&quot;已处理预期异常: &#123;exc_val&#125;&quot;)</span><br><span class="line">            return True  # 阻止异常传播</span><br><span class="line">            </span><br><span class="line">        print(f&quot;未处理异常: &#123;exc_val&#125;&quot;)</span><br><span class="line">        return False  # 继续传播</span><br><span class="line"></span><br><span class="line"># 使用示例</span><br><span class="line">with SafeExecutor():</span><br><span class="line">    choice = random.choice([0,1])</span><br><span class="line">    if choice:</span><br><span class="line">        raise ValueError(&quot;测试值错误&quot;)</span><br><span class="line">    else:</span><br><span class="line">        raise Exception(&quot;未预期异常&quot;)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>小说字体反爬破解指南——Python实现woff2字体逆向解析与OCR识别</title>
    <url>/posts/f391c99a/</url>
    <content><![CDATA[<h2 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h2><p>小说等平台采用动态woff2字体实现文字反爬，传统CSS映射方法已无法满足需求。本文通过Python实现：</p>
<ol>
<li>使用fontTools解析woff2字体结构</li>
<li>基于FreeTypePen绘制矢量字形</li>
<li>结合Tesseract OCR实现字符识别</li>
<li>构建完整字体映射表</li>
</ol>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 核心依赖库</span></span><br><span class="line">pip install fonttools pillow pytesseract</span><br></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"><span class="keyword">from</span> fontTools.pens.freetypePen <span class="keyword">import</span> FreeTypePen</span><br><span class="line"><span class="keyword">from</span> fontTools.misc.transform <span class="keyword">import</span> Offset</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"></span><br><span class="line"><span class="comment"># todo 根据实际情况需要修改 配置 Tesseract 路径（Windows 需指定）</span></span><br><span class="line">pytesseract.pytesseract.tesseract_cmd = <span class="string">r&#x27;D:\Program Files (x86)\Tesseract-OCR\tesseract.exe&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">export_all_glyphs</span>(<span class="params">woff2_path, output_dir=<span class="string">&quot;glyph_images&quot;</span></span>):</span><br><span class="line">    font = TTFont(woff2_path, flavor=<span class="string">&#x27;woff2&#x27;</span>)</span><br><span class="line">    glyph_set = font.getGlyphSet()</span><br><span class="line">    os.makedirs(output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    ascender = font[<span class="string">&#x27;OS/2&#x27;</span>].usWinAscent</span><br><span class="line">    descender = -font[<span class="string">&#x27;OS/2&#x27;</span>].usWinDescent</span><br><span class="line">    height = ascender - descender</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> gname <span class="keyword">in</span> glyph_set.keys():</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;notdef&#x27;</span> <span class="keyword">in</span> gname:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        glyph = glyph_set[gname]</span><br><span class="line">        pen = FreeTypePen(<span class="literal">None</span>)</span><br><span class="line">        glyph.draw(pen)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成图片</span></span><br><span class="line">        image = pen.image(</span><br><span class="line">            width=glyph.width,</span><br><span class="line">            height=height,</span><br><span class="line">            transform=Offset(<span class="number">0</span>, -descender))</span><br><span class="line">        <span class="comment"># 识别文字（中文需要指定语言）</span></span><br><span class="line">        text = pytesseract.image_to_string(image, lang=<span class="string">&#x27;chi_sim&#x27;</span>,config=<span class="string">&#x27;--psm 6&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(gname,<span class="string">&#x27;====&#x27;</span>,text)</span><br><span class="line">    font.close()</span><br><span class="line">    <span class="comment"># 示例调用</span></span><br><span class="line">export_all_glyphs(<span class="string">&quot;dc027189e0ba4cd.woff2&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Python异常处理：从防御性编程到优雅降级的高级实践</title>
    <url>/posts/456142f0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Python开发中，异常处理常被视为初级主题，但真正优秀的异常处理策略往往体现了开发者对系统可靠性的深刻理解。本文不讨论基础的try&#x2F;except语法，而是聚焦于生产环境中异常处理的进阶实践，探讨如何构建具有容错性、可观测性的健壮系统。</p>
<hr>
<h2 id="一、异常处理三原则"><a href="#一、异常处理三原则" class="headerlink" title="一、异常处理三原则"></a>一、异常处理三原则</h2><h3 id="1-语义化异常捕获"><a href="#1-语义化异常捕获" class="headerlink" title="1. 语义化异常捕获"></a>1. 语义化异常捕获</h3><p>避免宽泛的Exception捕获，但也不要过度细分。建议按照业务逻辑分层捕获：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DataValidationError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_data</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        validate(data)  <span class="comment"># 可能抛出DataValidationError</span></span><br><span class="line">        transform(data) <span class="comment"># 可能抛出ValueError</span></span><br><span class="line">    <span class="keyword">except</span> DataValidationError <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;业务校验失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> APIValidationError <span class="keyword">from</span> e</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;数据转换异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> ServiceUnavailableError(<span class="string">&quot;数据处理服务不可用&quot;</span>) <span class="keyword">from</span> e</span><br></pre></td></tr></table></figure>

<h3 id="上下文保留"><a href="#上下文保留" class="headerlink" title="上下文保留"></a>上下文保留</h3><p>使用raise from保持异常链，但要注意信息过滤：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = create_db_connection()</span><br><span class="line"><span class="keyword">except</span> ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    logger.error(<span class="string">&quot;数据库连接失败&quot;</span>)</span><br><span class="line">    <span class="comment"># 保留原始异常但转换业务语义</span></span><br><span class="line">    <span class="keyword">raise</span> ServiceInitializationError(<span class="string">&quot;系统初始化失败&quot;</span>) <span class="keyword">from</span> e</span><br></pre></td></tr></table></figure>

<h3 id="资源安全边界"><a href="#资源安全边界" class="headerlink" title="资源安全边界"></a>资源安全边界</h3><p>推荐使用上下文管理器管理资源生命周期：</p>
<h4 id="1-自定义上下文管理器类"><a href="#1-自定义上下文管理器类" class="headerlink" title="1. 自定义上下文管理器类"></a>1. 自定义上下文管理器类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Transaction</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.conn = create_connection()</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.conn.cursor()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="keyword">if</span> exc_type <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.conn.commit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.conn.rollback()</span><br><span class="line">        <span class="variable language_">self</span>.conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Transaction() <span class="keyword">as</span> cursor:</span><br><span class="line">    cursor.execute(<span class="string">&quot;UPDATE accounts SET balance = ...&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="2-进阶技巧-contextlib-工具库"><a href="#2-进阶技巧-contextlib-工具库" class="headerlink" title="2. [进阶技巧]contextlib 工具库"></a>2. [进阶技巧]contextlib 工具库</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>():</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span>  <span class="comment"># 在此处分割 __enter__ 和 __exit__</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;耗时：<span class="subst">&#123;time.time() - start:<span class="number">.2</span>f&#125;</span>s&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">with</span> timer():</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>一文彻底搞懂Python实例方法、类方法和静态方法的区别</title>
    <url>/posts/a864ad36/</url>
    <content><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><ul>
<li>**实例方法(Instance Method)**：绑定对象实例，可操作实例属性</li>
<li>**类方法(Class Method)**：绑定类本身，可操作类属性</li>
<li>**静态方法(Static Method)**：独立工具函数，不绑定实例或类</li>
</ul>
<hr>
<h2 id="2-实例方法"><a href="#2-实例方法" class="headerlink" title="2. 实例方法"></a>2. 实例方法</h2><h3 id="基本特性"><a href="#基本特性" class="headerlink" title="基本特性"></a>基本特性</h3><ul>
<li><strong>定义格式</strong>：默认第一个参数为<code>self</code></li>
<li><strong>访问权限</strong>：可访问实例属性和类属性</li>
<li><strong>调用方式</strong>：必须通过类实例调用</li>
</ul>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">instance_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;实例方法调用，实例属性: <span class="subst">&#123;self.instance_attr&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;类属性: <span class="subst">&#123;MyClass.class_attr&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = MyClass()</span><br><span class="line">obj.instance_attr = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">MyClass.class_attr = <span class="string">&quot;World&quot;</span></span><br><span class="line">obj.instance_method()</span><br></pre></td></tr></table></figure>
<h2 id="3-类方法"><a href="#3-类方法" class="headerlink" title="3. 类方法"></a>3. 类方法</h2><h3 id="基本特性-1"><a href="#基本特性-1" class="headerlink" title="基本特性"></a>基本特性</h3><ul>
<li><strong>定义格式</strong>：使用@classmethod装饰器，第一个参数为cls</li>
<li><strong>访问权限</strong>：只能访问类属性</li>
<li><strong>调用方式</strong>：可通过类或实例调用</li>
</ul>
<h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    class_attr = <span class="string">&quot;原始值&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">class_method</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;类方法调用，修改前类属性: <span class="subst">&#123;cls.class_attr&#125;</span>&quot;</span>)</span><br><span class="line">        cls.class_attr = <span class="string">&quot;新值&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;修改后类属性: <span class="subst">&#123;cls.class_attr&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">MyClass.class_method()  <span class="comment"># 通过类调用</span></span><br><span class="line">obj = MyClass()</span><br><span class="line">obj.class_method()      <span class="comment"># 通过实例调用</span></span><br></pre></td></tr></table></figure>
<h2 id="4-静态方法"><a href="#4-静态方法" class="headerlink" title="4. 静态方法"></a>4. 静态方法</h2><h3 id="基本特性-2"><a href="#基本特性-2" class="headerlink" title="基本特性"></a>基本特性</h3><ul>
<li><strong>定义格式</strong>：使用@staticmethod装饰器，无默认参数</li>
<li><strong>访问权限</strong>：不能访问实例或类属性</li>
<li><strong>调用方式</strong>：可通过类或实例调用</li>
</ul>
<h3 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">static_method</span>(<span class="params">num</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;静态方法调用，参数平方: <span class="subst">&#123;num ** <span class="number">2</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">MyClass.static_method(<span class="number">5</span>)  <span class="comment"># 通过类调用</span></span><br><span class="line">obj = MyClass()</span><br><span class="line">obj.static_method(<span class="number">3</span>)      <span class="comment"># 通过实例调用</span></span><br></pre></td></tr></table></figure>
<h2 id="代码实例对比"><a href="#代码实例对比" class="headerlink" title="代码实例对比"></a>代码实例对比</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">汽车工厂</span>:</span><br><span class="line">    默认颜色 = <span class="string">&quot;白色&quot;</span>  <span class="comment"># 类属性（所有车默认颜色）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, 型号</span>):</span><br><span class="line">        <span class="variable language_">self</span>.型号 = 型号  <span class="comment"># 实例属性（每辆车的型号不同）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 实例方法：操作具体汽车</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">改颜色</span>(<span class="params">self, 新颜色</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;把 <span class="subst">&#123;self.型号&#125;</span> 的颜色改成 <span class="subst">&#123;新颜色&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.颜色 = 新颜色</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 类方法：操作整个工厂</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">换默认颜色</span>(<span class="params">cls, 新颜色</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;工厂所有新车的默认颜色改为 <span class="subst">&#123;新颜色&#125;</span>&quot;</span>)</span><br><span class="line">        cls.默认颜色 = 新颜色  <span class="comment"># 修改类属性</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 静态方法：独立工具</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">计算油耗</span>(<span class="params">公里数, 排量</span>):</span><br><span class="line">        <span class="keyword">return</span> 公里数 * 排量 * <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------ 使用场景 -------------------  </span></span><br><span class="line"><span class="comment"># 1. 实例方法：操作具体对象</span></span><br><span class="line">我的车 = 汽车工厂(<span class="string">&quot;SUV&quot;</span>)  </span><br><span class="line">我的车.改颜色(<span class="string">&quot;红色&quot;</span>)  <span class="comment">#  正确：修改具体车的颜色</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 类方法：修改工厂设置</span></span><br><span class="line">汽车工厂.换默认颜色(<span class="string">&quot;蓝色&quot;</span>)  <span class="comment">#  正确：所有新车变蓝色</span></span><br><span class="line">新车 = 汽车工厂(<span class="string">&quot;轿车&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(新车.颜色)  <span class="comment"># 输出：蓝色（因为类属性被修改）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 静态方法：独立计算</span></span><br><span class="line">油耗 = 汽车工厂.计算油耗(<span class="number">100</span>, <span class="number">2.0</span>)  <span class="comment">#  正确：无需具体车或工厂</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;油耗：<span class="subst">&#123;油耗&#125;</span>升&quot;</span>)  <span class="comment"># 输出：油耗：2.0升</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Python协程入门必读：从生成器基础到async/await实战</title>
    <url>/posts/4ad81875/</url>
    <content><![CDATA[<blockquote>
<p>协程（Coroutine）是Python异步编程的核心，但许多开发者对其底层原理和演进过程一知半解。本文将通过<strong>生成器进化史</strong>的视角，带您从基础到实战完整掌握协程开发，最后还会揭秘async&#x2F;await背后的魔法。</p>
</blockquote>
<h2 id="一、理解生成器（Generator）"><a href="#一、理解生成器（Generator）" class="headerlink" title="一、理解生成器（Generator）"></a>一、理解生成器（Generator）</h2><p>生成器是一种惰性计算的迭代器，用 yield 关键字定义。它不会一次性生成所有数据，而是按需生成。</p>
<h3 id="1-1-生成器的本质"><a href="#1-1-生成器的本质" class="headerlink" title="1.1 生成器的本质"></a>1.1 生成器的本质</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">simple_gen</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;continue&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">gen=simple_gen()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=====&gt;test&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=====&gt;test&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="comment"># =====&gt;test</span></span><br><span class="line"><span class="comment"># start</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># =====&gt;test</span></span><br><span class="line"><span class="comment"># continue</span></span><br><span class="line"><span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

<p>生成器通过yield实现执行暂停，每次调用next()恢复执行直到遇到下一个yield。</p>
<h3 id="1-2-生成器的双向通信"><a href="#1-2-生成器的双向通信" class="headerlink" title="1.2 生成器的双向通信"></a>1.2 生成器的双向通信</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">interactive_gen</span>():</span><br><span class="line">    response = <span class="keyword">yield</span> <span class="string">&quot;What&#x27;s your name?&quot;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">f&quot;Hello, <span class="subst">&#123;response&#125;</span>!&quot;</span></span><br><span class="line"></span><br><span class="line">gen = interactive_gen()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))        <span class="comment"># 输出：What&#x27;s your name?</span></span><br><span class="line"><span class="built_in">print</span>(gen.send(<span class="string">&quot;Alice&quot;</span>)) <span class="comment"># 输出：Hello, Alice!</span></span><br></pre></td></tr></table></figure>
<p>通过.send()方法实现双向数据传递，建立协程的雏形</p>
<h2 id="二、生成器进化成协程"><a href="#二、生成器进化成协程" class="headerlink" title="二、生成器进化成协程"></a>二、生成器进化成协程</h2><h3 id="2-1-yield-from语法"><a href="#2-1-yield-from语法" class="headerlink" title="2.1 yield from语法"></a>2.1 yield from语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sub_gen</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main_gen</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> sub_gen()</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(main_gen())  <span class="comment"># 输出：[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>
<p>yield from实现生成器委托，为协程的任务嵌套奠定基础</p>
<h3 id="2-2-异常处理机制"><a href="#2-2-异常处理机制" class="headerlink" title="2.2 异常处理机制"></a>2.2 异常处理机制</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">error_gen</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;normal&quot;</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;error&quot;</span></span><br><span class="line"></span><br><span class="line">gen = error_gen()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))          <span class="comment"># 输出：normal</span></span><br><span class="line"><span class="built_in">print</span>(gen.throw(ValueError))  <span class="comment"># 输出：error</span></span><br></pre></td></tr></table></figure>
<p>.throw()和.close()方法让生成器具备完整的异常处理能力</p>
<h2 id="三、现代协程体系：async-await"><a href="#三、现代协程体系：async-await" class="headerlink" title="三、现代协程体系：async&#x2F;await"></a>三、现代协程体系：async&#x2F;await</h2><h3 id="3-1-事件循环原理"><a href="#3-1-事件循环原理" class="headerlink" title="3.1 事件循环原理"></a>3.1 事件循环原理</h3><p>想象一个高效的快递调度员：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">delivery</span>(<span class="params">name, time</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>快递开始送出&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(time) <span class="comment"># 挂起，非阻塞，让出控制权</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>快递已送达&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建三个并行任务</span></span><br><span class="line">    tasks = [</span><br><span class="line">        delivery(<span class="string">&quot;A&quot;</span>, <span class="number">2</span>),</span><br><span class="line">        delivery(<span class="string">&quot;B&quot;</span>, <span class="number">1</span>),</span><br><span class="line">        delivery(<span class="string">&quot;C&quot;</span>, <span class="number">3</span>)</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>
<p><strong>输出顺序：</strong><br>A快递开始送出<br>B快递开始送出<br>C快递开始送出<br>B快递已送达<br>A快递已送达<br>C快递已送达<br><strong>关键点：</strong><br><strong>并发执行</strong>：A 和 B 几乎同时开始。<br><strong>非阻塞</strong>：await asyncio.sleep 不会阻塞线程，而是让出控制权给事件循环。</p>
<h2 id="四、实战：异步HTTP客户端"><a href="#四、实战：异步HTTP客户端" class="headerlink" title="四、实战：异步HTTP客户端"></a>四、实战：异步HTTP客户端</h2><h3 id="4-1-使用aiohttp"><a href="#4-1-使用aiohttp" class="headerlink" title="4.1 使用aiohttp"></a>4.1 使用aiohttp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch_url</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">batch_fetch</span>():</span><br><span class="line">    urls = [...]  <span class="comment"># 100个URL</span></span><br><span class="line">    tasks = [fetch_url(url) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> asyncio.gather(*tasks)</span><br></pre></td></tr></table></figure>
<p>对比同步版本速度提升20倍以上</p>
]]></content>
  </entry>
  <entry>
    <title>数据分析第一步：手把手掌握Pandas数据结构基础</title>
    <url>/posts/f8533093/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
