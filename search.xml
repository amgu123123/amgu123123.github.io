<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>music163逆向</title>
    <url>/posts/fd4614f0/</url>
    <content><![CDATA[<details>
<summary>Code</summary>
<pre><code class="language-python">
from Crypto.Cipher import AES
from base64 import b64encode
from Crypto.Util.Padding import pad
import random
import json
import requests

<p>headers &#x3D; &#123;<br>            ‘Accept’: ‘<em>&#x2F;</em>‘,<br>            ‘Accept-Encoding’: ‘gzip,deflate,sdch’,<br>            ‘Accept-Language’: ‘zh-CN,zh;q&#x3D;0.8,gl;q&#x3D;0.6,zh-TW;q&#x3D;0.4’,<br>            ‘Connection’: ‘keep-alive’,<br>            ‘Content-Type’: ‘application&#x2F;x-www-form-urlencoded’,<br>            ‘Host’: ‘music.163.com’,<br>            ‘Referer’: ‘<a href="https://music.163.com/">https://music.163.com/</a>‘,<br>            ‘User-Agent’: ‘Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;63.0.3239.132 Safari&#x2F;537.36’<br>        &#125;</p>
<p>def gen_ran_string(num&#x3D;16):<br>    “””<br>    生成随机密钥<br>    :param num: &#x3D;16<br>    :return: 16位随机字符串<br>    “””<br>    chars &#x3D; ‘abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789’<br>    result &#x3D; “”<br>    b_len &#x3D; len(chars)<br>    for _ in range(num):<br>        index &#x3D; int(random.random() * b_len)<br>        result +&#x3D; chars[index]<br>    return result</p>
<p>def aes(a, b):<br>    key &#x3D; b.encode(‘utf-8’)<br>    iv &#x3D; b’0102030405060708’<br>    cipher &#x3D; AES.new(key, AES.MODE_CBC, iv)<br>    padded_data &#x3D; pad(a.encode(‘utf-8’), AES.block_size, style&#x3D;’pkcs7’)<br>    ciphertext &#x3D; cipher.encrypt(padded_data)<br>    return b64encode(ciphertext).decode(‘utf-8’)</p>
<p>class RSAKeyPair:<br>    def <strong>init</strong>(self, e_hex, d_hex, m_hex):<br>        self.e &#x3D; int(e_hex, 16)<br>        self.m &#x3D; int(m_hex, 16)<br>        # 计算 chunk_size：根据模数字节长度确定<br>        byte_length &#x3D; (self.m.bit_length() + 7) &#x2F;&#x2F; 8<br>        self.chunk_size &#x3D; byte_length - 2  # 等效于原JS的 2 * biHighIndex(m)<br>        self.radix &#x3D; 16</p>
<p>def encrypted_string(rsa_key, s):<br>    # 将字符串编码为Latin-1字节数组<br>    byte_data &#x3D; s.encode(‘latin-1’)<br>    # 填充0直到长度为chunk_size的倍数<br>    padding &#x3D; (-len(byte_data)) % rsa_key.chunk_size<br>    byte_data +&#x3D; bytes(padding)</p>
<pre><code>encrypted_blocks = []
hex_length = (rsa_key.m.bit_length() + 3) // 4  # 模数的十六进制长度

for i in range(0, len(byte_data), rsa_key.chunk_size):
    chunk = byte_data[i:i + rsa_key.chunk_size]
    # 转换为小端整数
    chunk_int = int.from_bytes(chunk, byteorder=&#39;little&#39;)
    # RSA加密：计算 (chunk^e) mod m
    encrypted_int = pow(chunk_int, rsa_key.e, rsa_key.m)
    # 转换为固定长度的十六进制字符串
    encrypted_hex = format(encrypted_int, &#39;0&#123;&#125;x&#39;.format(hex_length))
    encrypted_blocks.append(encrypted_hex)

return &#39; &#39;.join(encrypted_blocks)
</code></pre>
<p>def rsa(a, e_hex, m_hex):<br>    rsa_key &#x3D; RSAKeyPair(e_hex, “”, m_hex)<br>    return encrypted_string(rsa_key, a)</p>
<p>def post_request(url,params):<br>    session &#x3D; requests.Session()<br>    res&#x3D;session.post(url&#x3D;url,headers&#x3D;headers,data&#x3D;params)<br>    return res.json()</p>
<p>def encrypt_data(id):<br>    ramdom_string &#x3D; gen_ran_string()<br>    params &#x3D; {<br>        ‘ids’: [id],<br>        ‘csrf_token’: ‘’,<br>        ‘encodeType’: ‘aac’,<br>        ‘level’: ‘standard’<br>    }<br>    e &#x3D; ‘010001’<br>    f &#x3D; ‘00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7’<br>    g &#x3D; ‘0CoJUm6Qyw8W8jud’<br>    encText &#x3D; aes(json.dumps(params), g)<br>    encText &#x3D; aes(encText, ramdom_string)<br>    encSecKey &#x3D; rsa(ramdom_string, e, f)<br>    data &#x3D; {<br>        ‘params’: encText,<br>        ‘encSecKey’: encSecKey<br>    }<br>    return data<br>def get_song_by_songId(id):<br>    data&#x3D;encrypt_data(id)<br>    res&#x3D;post_request(‘<a href="https://music.163.com/weapi/song/enhance/player/url/v1',data">https://music.163.com/weapi/song/enhance/player/url/v1&#39;,data</a>)<br>    print(res)</p>
<p>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:<br>    id&#x3D;’8729797481’ #音乐id<br>    get_song_by_songId(id)<br></code></pre></p>
</details>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>用Babel操作AST实现JavaScript代码的自动化生成与转换</title>
    <url>/posts/4a8d30c3/</url>
    <content><![CDATA[<blockquote>
<p>学习本文后，你将能够开发自己的代码转换工具！</p>
</blockquote>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li>
<li><a href="#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">环境搭建</a></li>
<li><a href="#%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9ast%E7%9A%84%E9%80%BB%E8%BE%91">代码：修改AST的逻辑</a><ul>
<li><a href="#%E9%87%8D%E5%91%BD%E5%90%8D%E5%87%BD%E6%95%B0%E5%90%8D">重命名函数名</a></li>
<li><a href="#%E9%87%8D%E5%91%BD%E5%90%8D%E5%8F%98%E9%87%8F%E5%B9%B6%E4%BF%AE%E6%94%B9%E5%8F%98%E9%87%8F%E5%80%BC">重命名变量并修改变量值</a></li>
<li><a href="#%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%9B%BF%E6%8D%A2">函数调用替换</a></li>
<li><a href="#%E6%8E%A7%E5%88%B6%E6%B5%81%E6%89%81%E5%B9%B3%E5%8C%96%E8%BF%98%E5%8E%9F">控制流扁平化还原</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E6%9C%AA%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8F%98%E9%87%8F">删除未使用的变量</a></li>
<li><a href="#%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%AE%80%E5%8C%96">对象属性简化</a></li>
<li><a href="#%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BC%98%E5%8C%96">条件表达式优化</a></li>
</ul>
</li>
</ul>
<hr>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol>
<li>安装环境<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install @babel/parser @babel/traverse @babel/generator @babel/types</span><br></pre></td></tr></table></figure></li>
<li>ast转换的代码框架<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;node:vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&#x27;@babel/parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&#x27;@babel/traverse&#x27;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="keyword">const</span> t = <span class="built_in">require</span>(<span class="string">&#x27;@babel/types&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&#x27;@babel/generator&#x27;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取混淆代码文件</span></span><br><span class="line"><span class="keyword">const</span> code = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;obfuscated.js&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析为AST</span></span><br><span class="line"><span class="keyword">const</span> ast = parser.<span class="title function_">parse</span>(code);</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO 修改AST的逻辑将在这里编写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成新代码</span></span><br><span class="line"><span class="keyword">const</span> output = <span class="title function_">generator</span>(ast);</span><br><span class="line">fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;clean.js&#x27;</span>, output.<span class="property">code</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="代码：修改AST的逻辑"><a href="#代码：修改AST的逻辑" class="headerlink" title="代码：修改AST的逻辑"></a>代码：修改AST的逻辑</h2><h3 id="重命名函数名"><a href="#重命名函数名" class="headerlink" title="重命名函数名"></a>重命名函数名</h3><ol>
<li>案例<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x1a2b</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">atob</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">_0x1a2b</span>(<span class="string">&quot;SGVsbG8=&quot;</span>)); <span class="comment">// 输出 &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>结果<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">decryptString</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">atob</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">_0x1a2b</span>(<span class="string">&quot;SGVsbG8=&quot;</span>)); <span class="comment">// 输出 &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>代码实现：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重命名加密函数</span></span><br><span class="line">    <span class="title class_">FunctionDeclaration</span>(path) &#123;</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">id</span>.<span class="property">name</span>===<span class="string">&#x27;_0x1a2b&#x27;</span>) &#123;</span><br><span class="line">            path.<span class="property">node</span>.<span class="property">id</span>.<span class="property">name</span>=<span class="string">&#x27;decryptString&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="重命名变量并修改变量值"><a href="#重命名变量并修改变量值" class="headerlink" title="重命名变量并修改变量值"></a>重命名变量并修改变量值</h3><ol>
<li>案例<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x12ab</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _0x3cde = [<span class="string">&quot;\\x48\\x65\\x6c\\x6c\\x6f&quot;</span>, <span class="string">&quot;\\x77\\x6f\\x72\\x6c\\x64&quot;</span>];</span><br><span class="line">  <span class="keyword">return</span> _0x3cde[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + _0x3cde[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>结果<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x12ab</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> words = [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;world&quot;</span>];</span><br><span class="line">  <span class="keyword">return</span> words[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + words[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>代码实现：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重命名变量并解密字符串</span></span><br><span class="line">    <span class="comment">//变量声明节点</span></span><br><span class="line">    <span class="title class_">VariableDeclarator</span>(path) &#123;</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">id</span>.<span class="property">name</span> === <span class="string">&#x27;_0x3cde&#x27;</span>) &#123;</span><br><span class="line">            path.<span class="property">node</span>.<span class="property">id</span>.<span class="property">name</span> = <span class="string">&#x27;words&#x27;</span>;  <span class="comment">// 修改变量名</span></span><br><span class="line">            <span class="comment">// 遍历elements数组</span></span><br><span class="line">            path.<span class="property">node</span>.<span class="property">init</span>.<span class="property">elements</span> = path.<span class="property">node</span>.<span class="property">init</span>.<span class="property">elements</span>.<span class="title function_">map</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 解密十六进制字符串</span></span><br><span class="line">                <span class="keyword">const</span> decoded = element.<span class="property">value</span>.<span class="title function_">replace</span>(<span class="regexp">/\\x([0-9a-fA-F]&#123;2&#125;)/g</span>,</span><br><span class="line">                    <span class="function">(<span class="params">_, hex</span>) =&gt;</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="built_in">parseInt</span>(hex, <span class="number">16</span>))</span><br><span class="line">                );</span><br><span class="line">                <span class="comment">// 关键</span></span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&#x27;StringLiteral&#x27;</span>, <span class="attr">value</span>: decoded &#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//对象成员访问节点</span></span><br><span class="line">    <span class="title class_">MemberExpression</span>(path) &#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="property">node</span>.<span class="property">object</span>.<span class="property">name</span>===<span class="string">&#x27;_0x3cde&#x27;</span>)&#123;</span><br><span class="line">            path.<span class="property">node</span>.<span class="property">object</span>.<span class="property">name</span>=<span class="string">&#x27;words&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="函数调用替换"><a href="#函数调用替换" class="headerlink" title="函数调用替换"></a>函数调用替换</h3><ol>
<li>案例<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x1a2b</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">atob</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">_0x1a2b</span>(<span class="string">&quot;SGVsbG8=&quot;</span>)); <span class="comment">// 输出 &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>结果<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x1a2b</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">atob</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// 输出 &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>代码实现：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">CallExpression</span>(path) &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">callee</span>.<span class="property">name</span>===<span class="string">&#x27;_0x1a2b&#x27;</span>&amp;&amp;path.<span class="property">node</span>.<span class="property">arguments</span>[<span class="number">0</span>].<span class="property">type</span>===<span class="string">&#x27;StringLiteral&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//取出参数</span></span><br><span class="line">        <span class="keyword">const</span> encryptedStr=path.<span class="property">node</span>.<span class="property">arguments</span>[<span class="number">0</span>].<span class="property">value</span>;</span><br><span class="line">        <span class="comment">// 对参数进行解密</span></span><br><span class="line">        <span class="keyword">const</span> decryptedStr=<span class="title function_">atob</span>(encryptedStr);</span><br><span class="line">        <span class="comment">// 把原来的参数调用_0x1a2b(&quot;SGVsbG8=&quot;)，替换为decryptedStr，即对atob(encryptedStr)</span></span><br><span class="line">        path.<span class="title function_">replaceWith</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;StringLiteral&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>:decryptedStr</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="控制流扁平化还原"><a href="#控制流扁平化还原" class="headerlink" title="控制流扁平化还原"></a>控制流扁平化还原</h3><ol>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x1234</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _0x5678 = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (_0x5678.<span class="title function_">shift</span>()) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x1234</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>AST转换逻辑<br> · 识别switch-case结构：找到SwitchStatement节点<br> · 提取case顺序：通过_0x5678数组的初始值确定执行顺序（本例顺序为2→0→1）<br> · 重建代码顺序：按顺序合并case块中的语句，删除switch和while结构</p>
</li>
<li><p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">FunctionDeclaration</span>(path) &#123;</span><br><span class="line">    <span class="comment">// 1. 定位控制流数组声明</span></span><br><span class="line">    <span class="keyword">const</span> controlFlowDecl=path.<span class="property">node</span>.<span class="property">body</span>.<span class="property">body</span>.<span class="title function_">find</span>(<span class="function"><span class="params">n</span>=&gt;</span></span><br><span class="line">       (t.<span class="title function_">isVariableDeclaration</span>(n)&amp;&amp;</span><br><span class="line">       n.<span class="property">declarations</span>[<span class="number">0</span>].<span class="property">id</span>.<span class="property">name</span>===<span class="string">&#x27;_0x5678&#x27;</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (!controlFlowDecl) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 2. 提取控制流顺序 [2, 0, 1]</span></span><br><span class="line">    <span class="keyword">const</span> controlFlowArray = controlFlowDecl.<span class="property">declarations</span>[<span class="number">0</span>].<span class="property">init</span>.<span class="property">elements</span></span><br><span class="line">        .<span class="title function_">map</span>(<span class="function"><span class="params">e</span>=&gt;</span>e.<span class="property">value</span>);</span><br><span class="line">    <span class="comment">// 3. 删除控制流数组声明</span></span><br><span class="line">    path.<span class="property">node</span>.<span class="property">body</span>.<span class="property">body</span>=path.<span class="property">node</span>.<span class="property">body</span>.<span class="property">body</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">n</span>=&gt;</span></span><br><span class="line">        n!==controlFlowDecl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 提取switch语句</span></span><br><span class="line">    <span class="keyword">const</span> switchStmt = path.<span class="property">node</span>.<span class="property">body</span>.<span class="property">body</span></span><br><span class="line">        .<span class="title function_">find</span>(<span class="function"><span class="params">n</span> =&gt;</span> t.<span class="title function_">isWhileStatement</span>(n)).<span class="property">body</span>.<span class="property">body</span></span><br><span class="line">        .<span class="title function_">find</span>(<span class="function"><span class="params">n</span> =&gt;</span> t.<span class="title function_">isSwitchStatement</span>(n));;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 删除while语句</span></span><br><span class="line">    path.<span class="property">node</span>.<span class="property">body</span>.<span class="property">body</span>=path.<span class="property">node</span>.<span class="property">body</span>.<span class="property">body</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">n</span>=&gt;</span>!t.<span class="title function_">isWhileStatement</span>(n));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 建立case值到语句的映射</span></span><br><span class="line">    <span class="keyword">const</span> caseMap=<span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    switchStmt.<span class="property">cases</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">n</span>=&gt;</span>&#123;</span><br><span class="line">       caseMap.<span class="title function_">set</span>(n.<span class="property">test</span>.<span class="property">value</span>,n.<span class="property">consequent</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 按控制流顺序重组语句</span></span><br><span class="line">    <span class="keyword">const</span> orderedStatements=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> caseVal <span class="keyword">of</span> controlFlowArray)&#123;</span><br><span class="line">        <span class="keyword">const</span> stmts=caseMap.<span class="title function_">get</span>(caseVal)</span><br><span class="line">            .<span class="title function_">filter</span>(<span class="function"><span class="params">n</span>=&gt;</span>!t.<span class="title function_">isContinueStatement</span>(n));<span class="comment">// 移除continue</span></span><br><span class="line">        orderedStatements.<span class="title function_">push</span>(...stmts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8. 插入到函数体头部（保留其他语句）</span></span><br><span class="line">    path.<span class="property">node</span>.<span class="property">body</span>.<span class="property">body</span>.<span class="title function_">unshift</span>(...orderedStatements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="删除未使用的变量"><a href="#删除未使用的变量" class="headerlink" title="删除未使用的变量"></a>删除未使用的变量</h3><ol>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原始代码</span></span><br><span class="line"><span class="keyword">const</span> unusedVar = <span class="string">&quot;test&quot;</span>; <span class="comment">// 无任何地方使用</span></span><br><span class="line"><span class="keyword">const</span> activeVar = <span class="string">&quot;data&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(activeVar);</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> activeVar = <span class="string">&quot;data&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(activeVar);</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">VariableDeclarator</span>(path)&#123;</span><br><span class="line">    <span class="keyword">const</span> binding = path.<span class="property">scope</span>.<span class="title function_">getBinding</span>(path.<span class="property">node</span>.<span class="property">id</span>.<span class="property">name</span>);</span><br><span class="line">    <span class="comment">// 检测变量是否未被引用</span></span><br><span class="line">    <span class="keyword">if</span> (!binding || binding.<span class="property">references</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 删除整个 VariableDeclaration（需判断是否最后一个声明）</span></span><br><span class="line">        <span class="keyword">const</span> parent = path.<span class="property">parent</span>;</span><br><span class="line">        <span class="keyword">if</span> (parent.<span class="property">declarations</span>.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 情况1：整个 VariableDeclaration 只有一个声明 eg: const a = 1;</span></span><br><span class="line">            path.<span class="property">parentPath</span>.<span class="title function_">remove</span>();<span class="comment">// 删除父节点（即整个声明语句）</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 情况2：声明语句中有多个变量 eg: let a = 1, b = 2;</span></span><br><span class="line">            path.<span class="title function_">remove</span>();<span class="comment">// 只删除当前 VariableDeclarator</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="对象属性简化"><a href="#对象属性简化" class="headerlink" title="对象属性简化"></a>对象属性简化</h3><ol>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _0xabc = &#123;</span><br><span class="line">  <span class="string">&quot;xYz&quot;</span>: <span class="keyword">function</span>(<span class="params">s</span>) &#123; <span class="keyword">return</span> s.<span class="title function_">toUpperCase</span>(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(_0xabc[<span class="string">&quot;xYz&quot;</span>](<span class="string">&quot;hello&quot;</span>)); <span class="comment">// 输出 &quot;HELLO&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _0xabc = &#123;</span><br><span class="line">  <span class="attr">upper</span>: <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(utils.<span class="title function_">upper</span>(<span class="string">&quot;hello&quot;</span>)); <span class="comment">// 输出 &quot;HELLO&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>AST转换逻辑</p>
<ol>
<li>识别对象属性：找到ObjectProperty节点中的动态键（如”xYz”）</li>
<li>重命名属性和调用方式：将_0xabc[“xYz”]改为utils.upper</li>
</ol>
</li>
<li><p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ObjectProperty</span>(path) &#123;</span><br><span class="line">    <span class="comment">// 重命名键名</span></span><br><span class="line">    <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">key</span>.<span class="property">value</span> === <span class="string">&quot;xYz&quot;</span>) &#123;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">key</span> = t.<span class="title function_">identifier</span>(<span class="string">&quot;upper&quot;</span>); <span class="comment">// 改为标识符形式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title class_">MemberExpression</span>(path) &#123;</span><br><span class="line">    <span class="comment">// 转换动态属性访问为静态</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        t.<span class="title function_">isIdentifier</span>(path.<span class="property">node</span>.<span class="property">object</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;_0xabc&quot;</span> &#125;) &amp;&amp;</span><br><span class="line">        t.<span class="title function_">isStringLiteral</span>(path.<span class="property">node</span>.<span class="property">property</span>, &#123; <span class="attr">value</span>: <span class="string">&quot;xYz&quot;</span> &#125;)</span><br><span class="line">    ) &#123;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">object</span>.<span class="property">name</span> = <span class="string">&quot;utils&quot;</span>;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">property</span> = t.<span class="title function_">identifier</span>(<span class="string">&quot;upper&quot;</span>);</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">computed</span> = <span class="literal">false</span>; <span class="comment">// 改为.访问方式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="条件表达式优化"><a href="#条件表达式优化" class="headerlink" title="条件表达式优化"></a>条件表达式优化</h3><ol>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isVIP = !![]; <span class="comment">// 混淆写法：!![] → true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isVIP ? <span class="string">&quot;VIP User&quot;</span> : <span class="string">&quot;Guest&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>AST转换逻辑<br> · 计算常量表达式：在AST遍历阶段预计算!![]的值<br> · 删除无效分支：根据计算结果删除false分支</p>
</li>
<li><p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">没写完。。。。</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>js</tag>
        <tag>Babel</tag>
        <tag>逆向</tag>
        <tag>AST</tag>
      </tags>
  </entry>
</search>
